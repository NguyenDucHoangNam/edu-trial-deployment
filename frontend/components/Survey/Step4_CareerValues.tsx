// components/Survey/Step4_CareerValues.tsx
import React, { useState, useEffect } from "react";

// V√≠ d·ª• c√°c c·∫∑p gi√° tr·ªã cho La B√†n S·ª± Nghi·ªáp
const careerValuePairs = [
  {
    id: "pair1",
    question: "B·∫°n ∆∞u ti√™n ƒëi·ªÅu g√¨ h∆°n?",
    optionA: { value: "high_income_early", label: "üí∏ Thu nh·∫≠p cao ngay t·ª´ ƒë·∫ßu" },
    optionB: { value: "continuous_learning", label: "üå± C∆° h·ªôi h·ªçc h·ªèi v√† ph√°t tri·ªÉn li√™n t·ª•c" },
  },
  {
    id: "pair2",
    question: "B·∫°n ∆∞u ti√™n ƒëi·ªÅu g√¨ h∆°n?",
    optionA: { value: "stability_security", label: "üè¶ S·ª± ·ªïn ƒë·ªãnh, ch·∫Øc ch·∫Øn trong c√¥ng vi·ªác" },
    optionB: { value: "dynamic_challenge", label: "üöÄ M√¥i tr∆∞·ªùng nƒÉng ƒë·ªông, nhi·ªÅu th·ª≠ th√°ch" },
  },
  {
    id: "pair3",
    question: "B·∫°n ∆∞u ti√™n ƒëi·ªÅu g√¨ h∆°n?",
    optionA: { value: "social_impact", label: "üåç T·∫°o ra ·∫£nh h∆∞·ªüng, ƒë√≥ng g√≥p cho x√£ h·ªôi" },
    optionB: { value: "recognition_advancement", label: "üèÜ ƒê·∫°t ƒë∆∞·ª£c s·ª± c√¥ng nh·∫≠n, v·ªã tr√≠ cao" },
  },
   {
    id: "pair4",
    question: "B·∫°n ∆∞u ti√™n ƒëi·ªÅu g√¨ h∆°n?",
    optionA: { value: "work_life_balance", label: "‚öñÔ∏è C√¢n b·∫±ng c√¥ng vi·ªác - cu·ªôc s·ªëng" },
    optionB: { value: "career_dedication", label: "üî• C·ªëng hi·∫øn h·∫øt m√¨nh cho s·ª± nghi·ªáp" },
  },
   {
    id: "pair5",
    question: "B·∫°n ∆∞u ti√™n ƒëi·ªÅu g√¨ h∆°n?",
    optionA: { value: "independence_autonomy", label: "üë§ L√†m vi·ªác ƒë·ªôc l·∫≠p, t·ª± ch·ªß cao" },
    optionB: { value: "teamwork_collaboration", label: "ü§ù L√†m vi·ªác trong ƒë·ªôi nh√≥m m·∫°nh, g·∫Øn k·∫øt" },
  },
];

// V√≠ d·ª• c√°c ƒë·ªông l·ª±c n·ªôi t√¢m
const innerMotivationOptions = [
    { id: "motivation_money", label: "Ki·∫øm ƒë∆∞·ª£c nhi·ªÅu ti·ªÅn" },
    { id: "motivation_create", label: "T·∫°o ra s·∫£n ph·∫©m/d·ªãch v·ª• h·ªØu √≠ch" },
    { id: "motivation_help", label: "Gi√∫p ƒë·ª° ng∆∞·ªùi kh√°c / C·ªông ƒë·ªìng" },
    { id: "motivation_recognition", label: "ƒê∆∞·ª£c c√¥ng nh·∫≠n, t√¥n tr·ªçng" },
    { id: "motivation_good_env", label: "M√¥i tr∆∞·ªùng l√†m vi·ªác t·ªët" },
    { id: "motivation_growth", label: "C∆° h·ªôi h·ªçc h·ªèi, thƒÉng ti·∫øn" },
    { id: "motivation_freedom", label: "S·ª± t·ª± do, linh ho·∫°t, s√°ng t·∫°o" },
];

interface Step4Props {
  answers: Partial<any>;
  updateAnswers: (stepAnswers: Partial<any>) => void;
}

export default function Step4_CareerValues({ answers, updateAnswers }: Step4Props) {
  const [careerPriorities, setCareerPriorities] = useState<Record<string, string>>(answers.careerValues || {});
  const [selectedMotivations, setSelectedMotivations] = useState<Set<string>>(new Set(answers.innerMotivations || []));
  const [otherMotivation, setOtherMotivation] = useState<string>(answers.otherMotivation || "");


  useEffect(() => {
    updateAnswers({
        careerValues: careerPriorities,
        innerMotivations: Array.from(selectedMotivations),
        otherMotivation: otherMotivation
    });
  }, [careerPriorities, selectedMotivations, otherMotivation, updateAnswers]);

  const handlePriorityChange = (pairId: string, value: string) => {
    setCareerPriorities((prev) => ({ ...prev, [pairId]: value }));
  };

 const toggleMotivation = (motivationId: string) => {
    setSelectedMotivations((prev) => {
      const newSet = new Set(prev);
      if (newSet.has(motivationId)) {
        newSet.delete(motivationId);
      } else {
        newSet.add(motivationId);
      }
      return newSet;
    });
  };


  return (
    <div>
      {/* Ph·∫ßn 1: La B√†n S·ª± Nghi·ªáp */}
      <div className="mb-8">
        <h2 className="mb-4 text-xl font-semibold text-black dark:text-white">
          La B√†n S·ª± Nghi·ªáp
        </h2>
        <p className="mb-6 text-base text-body-color dark:text-dark-6">
          H√£y c√¢n nh·∫Øc v√† cho bi·∫øt b·∫°n s·∫Ω nghi√™ng v·ªÅ l·ª±a ch·ªçn n√†o h∆°n trong c√°c c·∫∑p gi√° tr·ªã d∆∞·ªõi ƒë√¢y khi nghƒ© v·ªÅ c√¥ng vi·ªác t∆∞∆°ng lai.
        </p>
        <div className="space-y-6">
          {careerValuePairs.map((pair) => (
            <div key={pair.id} className="rounded-md border border-gray-200 p-4 dark:border-dark-3">
              <p className="mb-3 font-medium text-black dark:text-white">{pair.question}</p>
              <div className="space-y-2">
                 <label className="flex cursor-pointer items-center space-x-3">
                   <input
                     type="radio"
                     name={pair.id}
                     value={pair.optionA.value}
                     checked={careerPriorities[pair.id] === pair.optionA.value}
                     onChange={(e) => handlePriorityChange(pair.id, e.target.value)}
                     className="h-4 w-4 text-primary focus:ring-primary"
                   />
                   <span className="text-base text-body-color dark:text-dark-6">{pair.optionA.label}</span>
                 </label>
                 <label className="flex cursor-pointer items-center space-x-3">
                   <input
                     type="radio"
                     name={pair.id}
                     value={pair.optionB.value}
                     checked={careerPriorities[pair.id] === pair.optionB.value}
                     onChange={(e) => handlePriorityChange(pair.id, e.target.value)}
                     className="h-4 w-4 text-primary focus:ring-primary"
                   />
                   <span className="text-base text-body-color dark:text-dark-6">{pair.optionB.label}</span>
                 </label>
              </div>
            </div>
          ))}
        </div>
      </div>

       {/* Ph·∫ßn 2: ƒê·ªông L·ª±c N·ªôi T√¢m */}
        <div className="mb-6">
            <h2 className="mb-4 text-xl font-semibold text-black dark:text-white">
            ƒê·ªông L·ª±c N·ªôi T√¢m
            </h2>
            <p className="mb-4 text-base text-body-color dark:text-dark-6">
            ƒêi·ªÅu g√¨ th·ª±c s·ª± quan tr·ªçng v√† t·∫°o ƒë·ªông l·ª±c cho b·∫°n trong c√¥ng vi·ªác t∆∞∆°ng lai? (Ch·ªçn nh·ªØng ƒëi·ªÅu quan tr·ªçng nh·∫•t)
            </p>
            <div className="space-y-3">
            {innerMotivationOptions.map((option) => (
                <label key={option.id} className="flex cursor-pointer items-center space-x-3 rounded-md border border-gray-300 p-3 transition hover:bg-gray-50 dark:border-dark-3 dark:hover:bg-dark">
                <input
                    type="checkbox"
                    checked={selectedMotivations.has(option.id)}
                    onChange={() => toggleMotivation(option.id)}
                    className="h-4 w-4 rounded text-primary focus:ring-primary"
                />
                <span className="text-base text-body-color dark:text-dark-6">{option.label}</span>
                </label>
            ))}
             {/* √î nh·∫≠p kh√°c */}
              <div className="pt-2">
                 <label htmlFor="otherMotivation" className="mb-2 block text-base font-medium text-body-color dark:text-dark-6">
                    ƒê·ªông l·ª±c kh√°c (n·∫øu c√≥):
                 </label>
                 <input
                   id="otherMotivation"
                   type="text"
                   value={otherMotivation}
                   onChange={(e) => setOtherMotivation(e.target.value)}
                   placeholder="Nh·∫≠p ƒë·ªông l·ª±c kh√°c c·ªßa b·∫°n..."
                   className="w-full rounded-md border border-gray-300 bg-white px-4 py-3 text-base text-body-color outline-none focus:border-primary focus-visible:shadow-none dark:border-dark-3 dark:bg-dark dark:text-dark-6"
                 />
              </div>
            </div>
        </div>
    </div>
  );
}